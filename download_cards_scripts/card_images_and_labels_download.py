import json
import os
import requests
from tqdm import tqdm


def singleSetRequest(setId, setName, metadata_dir="./metadata_dir"):
    # Create the "metadata_dir" folder
    os.makedirs(metadata_dir, exist_ok=True)

    # GET request to fetch the specified set
    API_URL_SINGLESET = f"https://api.tcgdex.net/v2/en/sets/{setId}"
    response = requests.get(API_URL_SINGLESET)

    if response.status_code == 200:
        cards = response.json()
        setName = setName.replace(" ", "")
        # Create a JSON file "cards_metadata_{Set Name}" with the set metadata
        file_path = os.path.join(metadata_dir, f"cards_metadata_{setName}.json")

        with open(file_path, "w") as file:
            json.dump(cards, file, indent=4)

        # Count and print the number of cards in the set
        number_of_card_in_set = len(cards["cards"])
        print(f"Downloaded metadata for {number_of_card_in_set} cards in the {setName} Set.")
    else:
        print(f"Failed to fetch data: {response.status_code} {response.json()}")


def ImgDownload(setId, setName, metadata_dir):
    # Open the metadata file generated by singleSetRequest()
    file_path = os.path.join(metadata_dir, f"cards_metadata_{setName}.json".replace(" ", ""))

    with open(file_path, "r") as file:
        cards = json.load(file)

    # Create the folder to store images
    image_dir_path = "assets/card_images"
    os.makedirs(image_dir_path, exist_ok=True)

    skipped_count = 0
    downloaded_count = 0

    # Iterate over each card in the set
    for card in tqdm(cards['cards'], desc=f"Downloading {setName} images", unit="card"):
        try:
            # Retrieve the image URL from the metadata and append quality and extension
            image_url = card["image"] + "/" + f"{IMAGE_QUALITY}.{IMG_EXTENSION}"

            if image_url:
                # Extract card ID and name
                card_id = card.get("id")
                card_name = card.get("name")

                # Construct file path
                file_path = os.path.join(image_dir_path,
                                         f"{card_id}_{card_name}_{IMAGE_QUALITY}.{IMG_EXTENSION}")
                file_path = ''.join(file_path.split())

                # Skip if the image already exists
                if os.path.exists(file_path):
                    skipped_count += 1
                    continue

                try:
                    # GET request to fetch the card image
                    img_data = requests.get(image_url).content

                    # Save the image
                    with open(file_path, "wb") as img_file:
                        img_file.write(img_data)
                    downloaded_count += 1

                except Exception as e:
                    print(f"Failed to download {card_id}: {e}")
        except Exception:
            print("No image found, skipping")

    # Print summary
    print(f"\nDownload Summary for {setName}:")
    print(f"Total cards in set: {len(cards['cards'])}")
    print(f"Successfully downloaded: {downloaded_count}")
    print(f"Skipped (already existing): {skipped_count}")


def generateLabels(setId, setName, metadata_dir="./metadata_dir"):
    setName = setName.replace(" ", "")
    # Open the metadata folder and read the set file
    file_path = os.path.join(metadata_dir, f"cards_metadata_{setName}.json")
    with open(file_path, "r") as file:
        cards = json.load(file)

    # Create the "labels_dir" folder
    annotations_dir = "./assets/image_labels"
    os.makedirs(annotations_dir, exist_ok=True)

    skipped_count = 0
    downloaded_count = 0

    # Generate annotations for each card
    for card in tqdm(cards['cards'], desc=f"Generating {setName} labels", unit="card"):
        # Extract the card ID
        cardId = card["id"]

        # Generate URL and send GET request for the individual card
        API_URL_SINGLE_CARD = f"https://api.tcgdex.net/v2/en/cards/{cardId}"
        response = requests.get(API_URL_SINGLE_CARD)
        card_obtained = response.json()

        try:
            # Extract card ID and name
            card_id = card_obtained["id"]
            card_name = card_obtained["name"].replace(" ", "")
            file_path = os.path.join(annotations_dir, f"labels_{cardId}_{card_name}.json")

            # Skip if the label file already exists
            if os.path.exists(file_path):
                skipped_count += 1
                continue

            # Replace the image field with the local image path
            card_obtained["image"] = f"assets/card_images/{card_id}_{card_name}_{IMAGE_QUALITY}.{IMG_EXTENSION}".replace(" ", "")
            card_obtained["image"] = ''.join(card_obtained["image"].split())
        except Exception:
            print(f"Failed to create label, ID not present")
            continue

        try:
            # Save the annotations to the newly created JSON file
            with open(file_path, "w") as json_file:
                json.dump(card_obtained, json_file, indent=4)
            downloaded_count += 1
        except Exception as e:
            print(f"Failed to create label for {card_id}: {e}")

    # Print summary
    print(f"\nLabel Generation Summary for {setName}:")
    print(f"Total cards in set: {len(cards['cards'])}")
    print(f"Successfully generated labels: {downloaded_count}")
    print(f"Skipped (already existing): {skipped_count}")


if __name__ == "__main__":
    # Image settings
    IMAGE_QUALITY = "low"
    IMG_EXTENSION = "png"

    setId_to_download = ""
    setName_to_download = ""
    metadata_dir = "./metadata_dir"

    API_URL_ALLSETS = f"https://api.tcgdex.net/v2/en/sets"
    response = requests.get(API_URL_ALLSETS)
    sets = response.json()

    if setId_to_download == "" and setName_to_download == "":
        for set in sets:
            singleSetRequest(set["id"], set["name"])
            ImgDownload(set["id"], set["name"], metadata_dir)
            generateLabels(set["id"], set["name"])
    else:
        singleSetRequest(setId_to_download, setName_to_download)
        ImgDownload(setId_to_download, setName_to_download, metadata_dir)
        generateLabels(setId_to_download, setName_to_download)